# rewriting variables passed from the outside environment doesn't work in LP,
# so use KERNELDEB as a temporary local variable to hold the kernel pkg name
KERNELDEB := $(KERNEL)

# linux-pc-image is a meta package used to indicate linux-image-generic,
# depending on the building architecture (amd64 or i386), it's invalid kernel
# name for any other arch
ifneq (,$(findstring linux-pc-image,$(KERNELDEB)))
ifneq (,$(filter amd64 i386 armhf arm64,$(DPKG_ARCH)))
KERNELDEB := $(subst linux-pc-image,linux-image-uc20-efi-$(FLAVOUR),$(KERNELDEB))
else
$(error linux-pc-image is a meta package only used in i386, amd64, armhf or arm64 abort)
endif
endif

prepare-host:
	cp canonical-kernel-team-uc20-release.asc /etc/apt/trusted.gpg.d/
	echo "deb http://ppa.launchpad.net/canonical-kernel-team/uc20-release/ubuntu $(RELEASE) main" >> /etc/apt/sources.list
	cp canonical-kernel-team-uc20-staging.asc /etc/apt/trusted.gpg.d/
	echo "deb http://ppa.launchpad.net/canonical-kernel-team/uc20-staging/ubuntu $(RELEASE) main" >> /etc/apt/sources.list
ifneq ($(HOST_RELEASE),$(RELEASE))
	sed -i 's/$(HOST_RELEASE)/$(RELEASE)/' /etc/apt/sources.list
endif
	if [ "$(PROPOSED)" = "true" ]; then \
	  echo "deb http://$(MIRROR) $(RELEASE)-proposed main restricted" >> /etc/apt/sources.list; \
	  echo "deb http://$(MIRROR) $(RELEASE)-proposed universe" >> /etc/apt/sources.list; \
	  echo "$${APTPREF}" > /etc/apt/preferences.d/01proposedkernel; \
	fi
	$(ENV) apt-get -y update

prepare-kernel: prepare-host
	mkdir chroot
	apt-get download linux-firmware wireless-regdb $(KERNELDEB) linux-image-$(ABI)-$(FLAVOUR) linux-modules-$(ABI)-$(FLAVOUR)
	if [ "$(FLAVOUR)" != "lowlatency" ]; then \
	  apt-get download linux-modules-extra-$(ABI)-$(FLAVOUR); \
	fi
	for p in $$(ls *.deb); do \
	  dpkg-deb -x $$p chroot; \
	done
	depmod -b chroot $(ABI)-$(FLAVOUR)

install-image:
	KERNEL_EFI="$$(ls chroot/boot/kernel.efi* | sort | head -1)"; \
	if [ ! -f "$$KERNEL_EFI" ]; then \
	  echo "No kernel.efi found, abort"; \
	  false; \
	fi; \
	mv $$KERNEL_EFI $(DESTDIR)/kernel.efi; \

version-check: prepare-kernel
	echo "KIMGDEB: $(KERNELDEB)"
	test -n "$(KERNELDEB)" || ( echo "Unable to extract KIMGDEB, exit"; false; )
	KIMGVER=$$(apt-cache show $(KERNELDEB) | sed -n -e 's/^Version: \([^+]*\)\(+.*\)\?/\1/p'|sort -V|tail -1); \
	echo "KIMGVER: $$KIMGVER"; \
	test -n "$$KIMGVER" || ( echo "Unable to extract KIMGVER, exit"; false; ); \
	if [ "$$KIMGVER" != "$(SNAPCRAFT_PROJECT_VERSION)" ]; then \
	  echo "Version mismatch:\nInstalled: $$KIMGVER Requested: $(SNAPCRAFT_PROJECT_VERSION)"; \
	  false; \
	fi
