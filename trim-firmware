#!/bin/bash -eu
#
# Remove unnecessary firmware files
#

function list_firmware()
{
	local modules_dir=${1}
	local module modinfo

	# List module firmware files
	while IFS= read -r module ; do
		/sbin/modinfo "${module}" | sed -n 's/^firmware:\s*//p'
	done < <(find "${modules_dir}" -name '*.ko')

	# List built-in module firmware files
	while IFS= read -r modinfo ; do
		tr '\0' '\n' < "${modinfo}" | sed -n 's/^.*\.firmware=//p'
	done < <(find "${modules_dir}" -name modules.builtin.modinfo)
}

DESTDIR=${1}

# Copy required firmware files to a new directory
while IFS= read -r fw_file ; do
	for src_file in "${DESTDIR}"/firmware/${fw_file} ; do
		if ! [ -e "${src_file}" ] ; then
			continue  # Skip non-existing source files
		fi

		src_dir=${src_file%/*}
		dst_dir=${DESTDIR}/firmware.new/${src_dir#${DESTDIR}/firmware}

		mkdir -p "${dst_dir}"
		# Note: We dereference symlinks which might result in duplicate
		# binaries but that's much easier than following the symlinks
		cp "${src_file}" "${dst_dir}"
	done
done < <(list_firmware "${DESTDIR}"/modules | sort -u)

# Copy all brcm files, since there might be config files that the kernel
# doesn't expose via modinfo
if [ -d "${DESTDIR}"/firmware.new/brcm ] ; then
	cp "${DESTDIR}"/firmware/brcm/* "${DESTDIR}"/firmware.new/brcm
fi

# Move kernel firmware files to the new firmware directory
for d in "${DESTDIR}"/modules/* ; do
	if [ -d "${DESTDIR}"/firmware/"${d##*/}" ] ; then
		mv "${DESTDIR}"/firmware/"${d##*/}" "${DESTDIR}"/firmware.new
	fi
done

# Switch to the new firmware directory
rm -rf "${DESTDIR}"/firmware
mv "${DESTDIR}"/firmware.new "${DESTDIR}"/firmware
