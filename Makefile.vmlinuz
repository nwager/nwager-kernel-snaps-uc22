# rewriting variables passed from the outside environment doesn't work in LP,
# so use KERNELDEB as a temporary local variable to hold the kernel pkg name
KERNELDEB := $(KERNEL)
KERNELPRE := linux-image-$(ABI)

# linux-pc-image is a meta package used to indicate linux-image-generic,
# depending on the building architecture (amd64 or i386), it's invalid kernel
# name for any other arch
ifneq (,$(findstring linux-pc-image,$(KERNELDEB)))
ifneq (,$(filter amd64 i386 armhf arm64,$(DPKG_ARCH)))
KERNELDEB := $(subst linux-pc-image,linux-image-generic,$(KERNELDEB))
else
$(error linux-pc-image is a meta package only used in i386, amd64, armhf or arm64 abort)
endif
endif

prepare-chroot:
	debootstrap --variant=minbase $(RELEASE) chroot
	$(ENV) chroot chroot apt-get -y update

	mount --bind /proc chroot/proc
	mount --bind /sys chroot/sys

	# Enable ppa:snappy-dev/image inside of the chroot and add the PPA's
	# public signing key to apt:
	cp snappy-dev-image.asc chroot/etc/apt/trusted.gpg.d/
	# Copy in the sources.list just before modifying it (on build envs this already
	# seems to be present, otherwise those would not fail).
ifeq ($(HOST_RELEASE),$(RELEASE))
	cp /etc/apt/sources.list chroot/etc/apt/sources.list
else
	cat /etc/apt/sources.list | sed 's/$(HOST_RELEASE)/$(RELEASE)/' > chroot/etc/apt/sources.list
endif
	echo "deb http://ppa.launchpad.net/snappy-dev/image/ubuntu $(RELEASE) main" >> chroot/etc/apt/sources.list

	# install all updates
	$(ENV) chroot chroot apt-get -y update
	$(ENV) chroot chroot apt-get -y upgrade

	if [ "$(PROPOSED)" = "true" ]; then \
	  echo "deb http://$(MIRROR) $(RELEASE)-proposed main restricted" >> chroot/etc/apt/sources.list; \
	  echo "deb http://$(MIRROR) $(RELEASE)-proposed universe" >> chroot/etc/apt/sources.list; \
	  echo "$${APTPREF}" > chroot/etc/apt/preferences.d/01proposedkernel; \
	fi

	$(ENV) chroot chroot apt-get -y update
	$(ENV) chroot chroot apt-get -y install ubuntu-core-initramfs linux-firmware

prepare-kernel: prepare-chroot
	# linux-firmware-raspi2 wants a /boot/firmware directory
ifneq (,$(filter linux-firmware-raspi2,$(PKGS)))
	mkdir -p chroot/boot/firmware
endif
	$(ENV) chroot chroot apt-get -y install $(KERNELMETAEQ) $(PKGS)
	umount chroot/sys
	umount chroot/proc

install-image:
	mv chroot/boot/vmlinu?-* $(DESTDIR)/kernel.img; \
	mv chroot/boot/ubuntu-core-initramfs.img-* $(DESTDIR)/initrd.img; \

version-check: KERNELVER := $(shell echo $(SNAPCRAFT_PROJECT_VERSION) | cut -f1-4 -d".")
version-check: KERNELMETAEQ = $(shell for meta in $$(chroot chroot apt-cache show $(KERNELDEB) | awk '/Package:/ {package=$$2} /Version:/ {print package "=" $$2}'); do chroot chroot apt-cache depends $$meta | awk '/$(KERNELPRE)/ {print "'"$$meta"'"}'; done)
version-check: KIMGDEB = $(shell chroot chroot apt-cache depends $(KERNELMETAEQ) | awk '/$(KERNELPRE)/ {print $$2}')
version-check: prepare-kernel
	echo "KERNELMETAEQ: $(KERNELMETAEQ)"
	echo "KIMGDEB: $(KIMGDEB)"
	test -n "$(KIMGDEB)" || ( echo "Unable to extract KIMGDEB, exit"; false; )
	KIMGVER=$$(dpkg --root=chroot -l | awk '/$(KIMGDEB)/ {print $$3}'); \
	echo "KIMGVER: $$KIMGVER"; \
	test -n "$$KIMGVER" || ( echo "Unable to extract KIMGVER, exit"; false; ); \
	case "$$KIMGVER" in \
	$(KERNELVER)|$(KERNELVER)+*) ;; \
	*)	echo "Version mismatch:\nInstalled: $$KIMGVER Requested: $(KERNELVER)"; \
	        false ;; \
	esac; \
